 Create a function that takes a positve integer and returns the next number that is bigger than it but smaller than any other number bigger than it.

 Examples:
 12 -> 21
 513 -> 531
 2018 -> 2071

If the digits can't be rearranged to form a bigger number, return -1.

1) Solve for the edge case of the number having less than two digits by returning -1.
	a) Create a variable called stringNumber which is a stringified version of the number.
	b) Create a variable called returnValue initialized to Infinity.
	b) Check that the length of stringNumber is not < 2.
	c) If it is return -1 from the function else proceed to step 2.

2) Start from the right side of the number with both pointers. The lower the digits that get swapped to find the number the quicker you can eliminate checking other digits.
	a) Create a function called swapDigits which takes a stringified number, and two indexes swapIndex1 and swapIndex2 and will return a new number with those indexes swapped
		1) Create an empty returnValue.
		2) Loop through stringNumber.
		3) Check if i == swap_index1.
		4) If so set returnValue to += stringNumber[swapIndex2]
		5) else if check if i == swap_index2.
		6) If so set returnValue to += stringNumber[swapIndex1]
		7) else set return Value to += stringNumber[i]
		8) At the end of the function return Number(returnValue).

	c) Create a variable called indexCap initialized to 0.
	d) Create a variable called largeDigitIndex initialized to stringNumber.length -2.
	e) Create a variable called smallDigitIndex initialized to stringNumber.length -1.
	f) Use a while loop checking that indexCap <= largeDigitIndex.
	g) The first action will be to create a variable called candidateNumber = swapDigits(stringNumber, largeDigitIndex, smallDigitIndex). 
	h) Check that candidateNumber is > number AND candidate number < returnValue.
		1) If so set indexCap = indexCap ? indexCap : largeDigitIndex. Once IndexCap is set every combination up to the index cap needs to be checked again.
		2) Set returnValue = candidateNumber
		3) Set largeDigitIndex = stringNumber.length - 2.
		4) set smallDigitIndex = stringNumber.length - 1.
	i) Else if largeDigitIndex == smallDigitIndex - 1 Set largeDigitIndex -= 1
		1) Set largeDigitIndex --.
		2) Set smallDigitIndex stringNumber.length - 1;
	j) Else smallDigitIndex -= 1.

3) Return isFinite(returnValue) ? returnValue : -1 from the function.

